package handlers

import (
	"erp/internal/app/models"
	"erp/internal/app/services"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
)

type TelegramHandler struct {
	bot             *tgbotapi.BotAPI
	engineerService *services.EngineerService
	orderService    *services.OrderService
	reportService   *services.ReportService
	keyboards       map[string]tgbotapi.InlineKeyboardMarkup
}

func NewTelegramHandler(bot *tgbotapi.BotAPI, engineerService *services.EngineerService, orderService *services.OrderService, reportService *services.ReportService) *TelegramHandler {
	return &TelegramHandler{
		bot:             bot,
		engineerService: engineerService,
		orderService:    orderService,
		reportService:   reportService,
		keyboards: map[string]tgbotapi.InlineKeyboardMarkup{
			"init": tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "init"),
				),
			),
		},
	}
}

func (h *TelegramHandler) HandleUpdates() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := h.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		if update.Message != nil && update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				h.handleStart(update.Message)
			}
			continue
		}

		if update.Message != nil {
			switch update.Message.Text {
			case "–ú–æ–∏ –∑–∞–∫–∞–∑—ã":
				h.showOrdersMenu(update.Message.Chat.ID)
			case "–°–µ–≥–æ–¥–Ω—è":
				h.showTodayOrders(update.Message.Chat.ID)
			}
			continue
		}

		if update.CallbackQuery != nil {
			h.handleCallback(update.CallbackQuery)
		}
	}
}

func (h *TelegramHandler) sendMessage(chatID int64, text string, keyboardKey ...string) {
	msg := tgbotapi.NewMessage(chatID, text)

	if len(keyboardKey) > 0 {
		if kb, ok := h.keyboards[keyboardKey[0]]; ok {
			msg.ReplyMarkup = kb
		}
	}

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (h *TelegramHandler) sendOrderList(chatID int64, title string, orders []models.Order) {
	text := title + "\n"
	for _, order := range orders {
		text += fmt.Sprintf("- %d (%s)\n", order.ERPNumber, order.Status)
	}
	h.sendMessage(chatID, text)
}

func (h *TelegramHandler) showRepeatOrders(chatID int64) {
	orders, err := h.orderService.GetRepeatOrders(chatID) // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º 2 –∑–Ω–∞—á–µ–Ω–∏—è
	if err != nil {
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–∫–∞–∑–æ–≤")
		log.Printf("GetRepeatOrders error: %v", err)
		return
	}

	if len(orders) == 0 {
		h.sendMessage(chatID, "–ù–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–∫–∞–∑–æ–≤")
		return
	}

	h.sendOrderList(chatID, "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–∫–∞–∑—ã:", orders)
}

func (h *TelegramHandler) showCashOrders(chatID int64) {
	orders, err := h.orderService.GetCashOrders(chatID) // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º 2 –∑–Ω–∞—á–µ–Ω–∏—è
	if err != nil {
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–∞—Å—Å—É")
		log.Printf("GetCashOrders error: %v", err)
		return
	}

	if len(orders) == 0 {
		h.sendMessage(chatID, "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–∞—Å—Å—É")
		return
	}

	h.sendOrderList(chatID, "–ó–∞–∫–∞–∑—ã –Ω–∞ –∫–∞—Å—Å—É:", orders)
}

func (h *TelegramHandler) showTodayOrders(chatID int64) {
	orders, err := h.orderService.GetTodayOrders(chatID)
	if err != nil {
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
		log.Printf("GetTodayOrders error: %v", err)
		return
	}

	if len(orders) == 0 {
		h.sendMessage(chatID, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
		return
	}

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	msg := tgbotapi.NewMessage(chatID, "üìÖ *–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*")
	msg.ParseMode = "Markdown"

	var rows [][]tgbotapi.InlineKeyboardButton

	for _, order := range orders {
		// –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
		timeStr := "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"
		if !order.ScheduledAt.IsZero() {
			timeStr = order.ScheduledAt.Format("15:04")
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
		btnText := fmt.Sprintf("%s. %s. %s (–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑)", timeStr, order.Problem.Name, order.Address)

		// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É —Å callback data –≤–∏–¥–∞ "order_view_100002"
		btn := tgbotapi.NewInlineKeyboardButtonData(btnText, fmt.Sprintf("order_view_%d", order.ERPNumber))

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	// –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "init"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msg.ReplyMarkup = keyboard

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("send orders list error: %v", err)
	}
}
