package handlers

import (
	"erp/internal/app/models"
	"erp/internal/utils"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
)

func (h *TelegramHandler) handleStart(msg *tgbotapi.Message) {
	telegramID := msg.From.ID
	username := msg.From.UserName

	// 1Ô∏è‚É£ –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ Telegram ID
	engineer, err := h.engineerService.GetEngineerByTelegramID(telegramID)
	if err != nil {
		h.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// 2Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Telegram ID ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ username
	if engineer == nil && username != "" {
		engineer, err = h.engineerService.GetEngineerByUsername(username)
		if err != nil {
			h.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ username, –Ω–æ –±–µ–∑ Telegram ID ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
		if engineer != nil && engineer.GetTelegramID() == nil {
			err = h.engineerService.UpdateTelegramID(int64(engineer.ID), telegramID)
			if err != nil {
				h.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
				return
			}
			h.sendMessage(msg.Chat.ID, "–í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é –∏–Ω–∂–µ–Ω–µ—Ä–∞.")
		}
	}

	// 3Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ–æ–±—â–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
	if engineer == nil {
		newEngineer := &models.Engineer{
			Username:   username,
			TelegramID: utils.Int64ToNullInt64(telegramID),
			IsApproved: false,
		}

		engineer, err = h.engineerService.CreateEngineer(newEngineer)
		if err != nil {
			h.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		h.sendMessage(msg.Chat.ID, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	// 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	if !engineer.IsApproved {
		h.sendMessage(msg.Chat.ID, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	// 5Ô∏è‚É£ –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
	h.showMainMenu(msg.Chat.ID)
}

func (h *TelegramHandler) showMainMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
		),
	)
	_, err := h.bot.Send(msg)
	if err != nil {
		return
	}
}

func (h *TelegramHandler) handleAcceptOrder(query *tgbotapi.CallbackQuery, acceptMode string) {
	erpNumber := parseErpNumber(query.Data)
	if erpNumber == 0 {
		h.sendMessage(query.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑")
		return
	}

	// üßπ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞
	deleteMsg := tgbotapi.NewDeleteMessage(query.Message.Chat.ID, query.Message.MessageID)
	if _, err := h.bot.Request(deleteMsg); err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
	}

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
	if err := h.orderService.EngineerAcceptOrderByErpNumber(erpNumber); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: %v", err)
		h.sendMessage(query.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ üòï")
		return
	}

	// üí¨ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	var text string
	if acceptMode == "happy" {
		text = fmt.Sprintf("üòÑ –í—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ%d!", erpNumber)
	} else {
		text = fmt.Sprintf("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ%d.", erpNumber)
	}

	// üß≠ –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("order_view_%d", erpNumber)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "init"),
		),
	)

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—É: %v", err)
	}
}

func (h *TelegramHandler) showOrderDetails(query *tgbotapi.CallbackQuery) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º ERP –Ω–æ–º–µ—Ä –∏–∑ callback data
	parts := strings.Split(query.Data, "_")
	if len(parts) < 3 {
		h.sendMessage(query.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑ üòï")
		return
	}

	erpNumber, err := strconv.ParseInt(parts[2], 10, 64)
	if err != nil {
		h.sendMessage(query.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ üòï")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
	order, err := h.orderService.GetOrderForAssign(erpNumber)
	if err != nil || order == nil {
		h.sendMessage(query.Message.Chat.ID, fmt.Sprintf("–ó–∞–∫–∞–∑ ‚Ññ%d –Ω–µ –Ω–∞–π–¥–µ–Ω üïµÔ∏è‚Äç‚ôÇÔ∏è", erpNumber))
		return
	}

	// üßæ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	clientName := order.ClientName
	if clientName == "" {
		clientName = "‚Äî"
	}

	address := order.Address
	if address == "" {
		address = "‚Äî"
	}

	note := order.Note
	if note == "" {
		note = "‚Äî"
	}

	date := ""
	if !order.ScheduledAt.IsZero() {
		date = order.ScheduledAt.Format("02.01.2006 15:04")
	} else {
		date = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
	}

	text := fmt.Sprintf(
		"üìÑ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ‚Ññ%d*\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s\n"+
			"üè† –ê–¥—Ä–µ—Å: %s\n"+
			"üîß –ü—Ä–æ–±–ª–µ–º–∞: %s\n"+
			"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: %s\n",
		order.ERPNumber,
		clientName,
		address,
		note,
		date,
	)

	reportLink, _ := h.reportService.GenerateReportLink(order.ERPNumber, int64(order.Engineer.ID))

	// üéõ –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞–∫–∞–∑–æ–º
	var buttons []tgbotapi.InlineKeyboardButton

	buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData("üè† –í –º–µ–Ω—é", "init"))

	if reportLink != "" {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonURL("üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", reportLink))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons)

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: %v", err)
	}
}

func parseErpNumber(data string) int64 {
	parts := strings.Split(data, "_")
	if len(parts) < 2 {
		return 0
	}
	num, _ := strconv.ParseInt(parts[len(parts)-1], 10, 64)
	return num
}
